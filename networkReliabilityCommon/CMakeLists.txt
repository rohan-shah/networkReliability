cmake_minimum_required(VERSION 3.1)
set(CppFiles Arguments.cpp ArgumentsMPFR.cpp Context.cpp NetworkReliabilityObs.cpp NetworkReliabilitySubObs.cpp Turnip.cpp ZoomGraphicsView.cpp computeConditionalProb.cpp conditionalPMC.cpp createFunctionBinary.cpp formulaDriver.cpp graphAlgorithms.cpp empiricalDistribution.cpp)
set(HeaderFiles Arguments.h ArgumentsMPFR.h Context.h EdgeState.h NetworkReliabilityObs.h NetworkReliabilitySubObs.h Turnip.h ZoomGraphicsView.h computeConditionalProb.h conditionalPMC.h createFunctionBinary.h formulaDriver.h graphAlgorithms.h includeMPFR.h astCode.hpp empiricalDistribution.h)

if(WIN32)
	list(REMOVE_ITEM CppFiles createFunctionBinary.cpp formulaDriver.cpp)
	list(REMOVE_ITEM HeaderFiles formulaDriver.h createFunctionBinary.h)
else()
	BISON_TARGET(formulaParser formulaParser.yy ${CMAKE_CURRENT_BINARY_DIR}/formulaParser.cpp COMPILE_FLAGS " -L c++ ")
	FLEX_TARGET(formulaScanner formulaScanner.ll ${CMAKE_CURRENT_BINARY_DIR}/formulaScanner.cc)
	ADD_FLEX_BISON_DEPENDENCY(formulaScanner formulaParser)
	list(APPEND CppFiles ${BISON_formulaParser_OUTPUTS} ${FLEX_formulaScanner_OUTPUTS})
endif()
if(NOT ${Qt5_FOUND})
	list(REMOVE_ITEM HeaderFiles ZoomGraphicsView.h)
	list(REMOVE_ITEM CppFiles ZoomGraphicsView.cpp)
else()
endif()

add_library(networkReliabilityCommon STATIC ${CppFiles} ${HeaderFiles})
target_include_directories(networkReliabilityCommon PUBLIC ${Boost_INCLUDE_DIRS})
target_include_directories(networkReliabilityCommon INTERFACE ${PROJECT_SOURCE_DIR}/networkReliabilityCommon)
target_link_libraries(networkReliabilityCommon INTERFACE ${Boost_LIBRARIES})
target_link_libraries(networkReliabilityCommon PUBLIC truncatedBinomialDistribution)
target_include_directories(networkReliabilityCommon PUBLIC ${allPointsMaxFlow_INCLUDE_DIRS})
target_compile_definitions(networkReliabilityCommon PUBLIC BOOST_ALL_NO_LIB BOOST_ALL_DYN_LINK)
if(${Qt5_FOUND})
	target_link_libraries(networkReliabilityCommon PUBLIC Qt5::Core Qt5::Gui Qt5::Widgets)
endif()
if(WIN32)
	target_link_libraries(networkReliabilityCommon PUBLIC mpfr mpir)
	set_target_properties(networkReliabilityCommon PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/x64/ PDB_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/x64/)
else()
	target_link_libraries(networkReliabilityCommon PUBLIC dl)
	target_compile_definitions(networkReliabilityCommon PUBLIC HAS_BISON_AND_FLEX)
	target_compile_features(networkReliabilityCommon PUBLIC cxx_rvalue_references)
	#Adding the binary directory because that's where the generated flex/bison code goes
	target_include_directories(networkReliabilityCommon PUBLIC ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR})
endif()
