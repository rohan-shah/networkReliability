cmake_minimum_required(VERSION 3.1)
set(CppFiles Arguments.cpp ArgumentsMPFR.cpp Context.cpp NetworkReliabilityObs.cpp Turnip.cpp ZoomGraphicsView.cpp computeConditionalProb.cpp conditionalPMC.cpp graphAlgorithms.cpp empiricalDistribution.cpp binaryDataSet.cpp NetworkReliabilityObsCollection.cpp NetworkReliabilityObsTree.cpp resamplingCommon.cpp subObs/withResampling.cpp subObs/basic.cpp obs/withResampling.cpp obs/basic.cpp obs/withSub.cpp subObs/subObs.cpp)
set(HeaderFiles Arguments.h ArgumentsMPFR.h Context.h EdgeState.h NetworkReliabilityObs.h Turnip.h ZoomGraphicsView.h computeConditionalProb.h conditionalPMC.h graphAlgorithms.h includeMPFR.h astCode.hpp empiricalDistribution.h seriesParallelReduction.hpp binaryDataSet.h NetworkReliabilityObsTree.h resamplingCommon.h subObs/withResampling.h subObs/basic.h obs/withResampling.h obs/basic.h NetworkReliabilityObsCollection.h obs/withSub.h subObs/subObs.h obs/getSubObservation.hpp subObs/getObservation.hpp)

if(WIN32)
	list(APPEND HeaderFiles windowsConsoleOutput.h)
	list(APPEND CppFiles windowsConsoleOutput.cpp)
else()
	list(APPEND CppFiles createFunctionBinary.cpp formulaDriver.cpp)
	list(APPEND HeaderFiles formulaDriver.h createFunctionBinary.h)

	BISON_TARGET(formulaParser formulaParser.yy ${CMAKE_CURRENT_BINARY_DIR}/formulaParser.cpp COMPILE_FLAGS " -L c++ ")
	FLEX_TARGET(formulaScanner formulaScanner.ll ${CMAKE_CURRENT_BINARY_DIR}/formulaScanner.cc)
	ADD_FLEX_BISON_DEPENDENCY(formulaScanner formulaParser)
	list(APPEND CppFiles ${BISON_formulaParser_OUTPUTS} ${FLEX_formulaScanner_OUTPUTS})
endif()
if(NOT ${Qt5_FOUND})
	list(REMOVE_ITEM HeaderFiles ZoomGraphicsView.h)
	list(REMOVE_ITEM CppFiles ZoomGraphicsView.cpp)
endif()

add_library(networkReliabilityCommon STATIC ${CppFiles} ${HeaderFiles})
target_include_directories(networkReliabilityCommon PUBLIC ${Boost_INCLUDE_DIRS} ${GRAPHVIZ_INCLUDE_DIR})
target_include_directories(networkReliabilityCommon PUBLIC ${PROJECT_SOURCE_DIR}/networkReliabilityCommon)
target_link_libraries(networkReliabilityCommon INTERFACE ${Boost_LIBRARIES})
target_link_libraries(networkReliabilityCommon PUBLIC aliasMethod truncatedBinomialDistribution maxFlowAlgorithms)
if(GRAPHVIZ_FOUND)
	target_link_libraries(networkReliabilityCommon PUBLIC graphviz_gvc graphviz_cgraph graphviz_pathplan)
endif()
target_include_directories(networkReliabilityCommon PUBLIC ${allPointsMaxFlow_INCLUDE_DIRS})
target_compile_definitions(networkReliabilityCommon PUBLIC BOOST_ALL_NO_LIB BOOST_ALL_DYN_LINK)

if(GRAPHVIZ_FOUND)
	set_target_properties(networkReliabilityCommon PROPERTIES COMPILE_DEFINITIONS HAS_GRAPHVIZ)	
endif()

if(${Qt5_FOUND})
	target_link_libraries(networkReliabilityCommon PUBLIC Qt5::Core Qt5::Gui Qt5::Widgets)
endif()
if(WIN32)
	target_link_libraries(networkReliabilityCommon PUBLIC mpfr mpir)
	set_target_properties(networkReliabilityCommon PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/x64/ PDB_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/x64/)
else()
	target_link_libraries(networkReliabilityCommon PUBLIC dl)
	target_compile_definitions(networkReliabilityCommon PUBLIC HAS_BISON_AND_FLEX)
	target_compile_features(networkReliabilityCommon PUBLIC cxx_rvalue_references)
	#Adding the binary directory because that's where the generated flex/bison code goes
	target_include_directories(networkReliabilityCommon PUBLIC ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR})
endif()
