cmake_minimum_required(VERSION 3.1)
project(networkReliability)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake")
set(Boost_USE_STATIC_LIBS	OFF)
set(Boost_USE_MULTITHREADED	ON)
set(Boost_USE_STATIC_RUNTIME	OFF)
if(CMAKE_COMPILER_IS_GNUCC)
	add_definitions("-Wall")
endif()
find_package(Boost 1.53.0 COMPONENTS graph program_options system serialization filesystem regex REQUIRED)
find_package(truncatedBinomialDistribution REQUIRED CONFIG)
find_package(Qt5 COMPONENTS Widgets Core Gui)
find_package(maxFlowAlgorithms REQUIRED CONFIG)
find_package(OpenMP REQUIRED)
find_package(GraphViz)
find_package(aliasMethod REQUIRED)
if(WIN32)
	find_package(mpir)
	find_package(mpfr)
else()
	#mpfr needs to be listed as an imported target so that we can use target_link_librarie later on. If we don't have this then it just adds a -lmpfr which probably picks up the wrong thing. 
	find_library(mpfr_LIBRARY mpfr)
	add_library(mpfr SHARED IMPORTED)
	set_target_properties(mpfr PROPERTIES IMPORTED_LOCATION ${mpfr_LIBRARY})

	find_package(BISON)
	find_package(FLEX)
	add_subdirectory(ExhaustiveFunctionSearch)
	add_subdirectory(ExhaustiveFunctionEvaluate)
	add_subdirectory(empiricalFunction)
	add_subdirectory(crudeMCConditionalFunction)
endif()
add_subdirectory(networkReliabilityCommon)
add_subdirectory(crudeMC)
add_subdirectory(ExhaustiveProbability)
add_subdirectory(ExhaustiveSearch)
add_subdirectory(splitting)
add_subdirectory(resampling)
add_subdirectory(resamplingExhaustive)
add_subdirectory(resamplingPMC)
add_subdirectory(generateGrid)
add_subdirectory(Turnip)
add_subdirectory(crudeMCConditional)
add_subdirectory(observationVisualiser)
add_subdirectory(approximateZeroVariance)
add_subdirectory(subObservationVisualiser)
